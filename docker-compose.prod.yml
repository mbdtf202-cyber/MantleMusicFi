version: '3.8'

services:
  # MongoDB数据库 - 生产环境配置
  mongodb:
    image: mongo:6.0
    container_name: mantlemusic-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: mantlemusic
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存 - 生产环境配置
  redis:
    image: redis:7-alpine
    container_name: mantlemusic-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端API服务 - 生产环境配置
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        NODE_ENV: production
    container_name: mantlemusic-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/mantlemusic?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
      AI_SERVICE_URL: http://ai-service:8000
      MANTLE_RPC_URL: ${MANTLE_RPC_URL}
      PRIVATE_KEY: ${PRIVATE_KEY}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
    depends_on:
      - mongodb
      - redis
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI服务 - 生产环境配置
  ai-service:
    build:
      context: .
      dockerfile: Dockerfile.ai
      args:
        ENVIRONMENT: production
    container_name: mantlemusic-ai-prod
    restart: always
    environment:
      APP_NAME: MantleMusic AI Service
      APP_VERSION: 1.0.0
      DEBUG: false
      HOST: 0.0.0.0
      PORT: 8000
      API_PREFIX: /api/v1
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/mantlemusic?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      LOG_LEVEL: INFO
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
    depends_on:
      - mongodb
      - redis
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 前端应用 - 生产环境配置
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${BACKEND_URL}
        NEXT_PUBLIC_AI_SERVICE_URL: ${AI_SERVICE_URL}
        NEXT_PUBLIC_MANTLE_RPC_URL: ${MANTLE_RPC_URL}
        NEXT_PUBLIC_CHAIN_ID: ${CHAIN_ID}
    container_name: mantlemusic-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
    expose:
      - "3000"
    depends_on:
      - backend
      - ai-service
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理 - 生产环境配置
  nginx:
    image: nginx:alpine
    container_name: mantlemusic-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mantlemusic-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mantlemusic-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mantlemusic-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  mantlemusic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16